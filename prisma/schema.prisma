generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  firstName          String?
  lastName           String?
  bio                String?
  passwordHash       String
  userAuthToken      String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  roleId             Int
  employmentStatusId Int?
  Company            Company?
  jobApplications    JobApplication[]
  resume             Resume?
  employmentStatus   EmploymentStatus? @relation(fields: [employmentStatusId], references: [id])
  role               Role              @relation(fields: [roleId], references: [id])
}

model Resume {
  id       Int     @id @default(autoincrement())
  filename String?
  url      String
  userId   Int     @unique
  user     User    @relation(fields: [userId], references: [id])
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  userId      Int     @unique
  user        User    @relation(fields: [userId], references: [id])
  jobs        Job[]
}

model Job {
  id              Int              @id @default(autoincrement())
  title           String
  salary          Float
  description     String
  companyId       Int
  categoryId      Int
  location        String
  typeId          Int
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  category        Category         @relation(fields: [categoryId], references: [id])
  company         Company          @relation(fields: [companyId], references: [id])
  type            JobType          @relation(fields: [typeId], references: [id])
  jobApplications JobApplication[]
}

model JobApplication {
  id        Int      @id @default(autoincrement())
  userId    Int
  jobId     Int
  resumeURL String
  status    String
  createdAt DateTime @default(now())
  job       Job      @relation(fields: [jobId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model JobType {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model EmploymentStatus {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}
