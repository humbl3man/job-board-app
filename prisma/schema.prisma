// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl         = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model User {
  id                 Int               @id @default(autoincrement())
  email              String            @unique
  firstName          String?
  lastName           String?
  bio                String?
  passwordHash       String
  userAuthToken      String            @unique
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  Company            Company?
  role               Role              @relation(fields: [roleId], references: [id])
  roleId             Int
  resume             Resume?
  jobApplications    JobApplication[]
  employmentStatus   EmploymentStatus? @relation(fields: [employmentStatusId], references: [id])
  employmentStatusId Int?
}

model Resume {
  id       Int     @id @default(autoincrement())
  filename String?
  url      String
  user     User    @relation(fields: [userId], references: [id])
  userId   Int     @unique
}

model Company {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  user        User    @relation(fields: [userId], references: [id])
  userId      Int     @unique
  jobs        Job[]
}

model Job {
  id          Int      @id @default(autoincrement())
  title       String
  salary      Float
  description String
  company     Company  @relation(fields: [companyId], references: [id])
  companyId   Int
  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int
  location    String
  type        JobType  @relation(fields: [typeId], references: [id])
  typeId      Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  jobApplications JobApplication[]
}

model JobApplication {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  job       Job      @relation(fields: [jobId], references: [id])
  jobId     Int
  resumeURL String
  status    String
  createdAt DateTime @default(now())
}

model JobType {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model Category {
  id   Int    @id @default(autoincrement())
  name String
  jobs Job[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}

model EmploymentStatus {
  id    Int    @id @default(autoincrement())
  name  String
  users User[]
}
